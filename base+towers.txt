import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.Rectangle;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.awt.MouseInfo;
class Base extends JPanel{
    Image grass, base, spot, towerSelect, archerUpgrade, magicUpgrade, freezeUpgrade, fireUpgrade, table, up;
    Image fireprogression, magicprogression, iceprogression, archerprogression, meteorIcon, redellipse, gold, damage;
    BadGuys badGuys;
    Maps maps;
    Menu menu;
    Font fontSys=null;
    private boolean ifOpen=false;
    private Towers tracker2;
    private Rectangle tracker;
    private Rectangle upgradelvl=new Rectangle(0,0,0,0);
    private boolean built=false,start=false, end=false;
    public boolean ready=false;
    int baseHp=1, myGold=500;
    private int destx, desty, olddestx=0, olddesty=0, olderX=0, olderY=0, towersSize=0;
    private Rectangle open1,open2,open3,open4,open5,open6;
    private Rectangle select1=new Rectangle(0,0,0,0);
    private Rectangle select2=new Rectangle(0,0,0,0);
    private Rectangle select3=new Rectangle(0,0,0,0);
    private Rectangle select4=new Rectangle(0,0,0,0);
    private Rectangle meteorSelect=new Rectangle(170,15,55,55);
    private Rectangle damageSelect=new Rectangle(270,15,55,55);
    private Rectangle screenRect=new Rectangle(0,0,0,0);
    private Rectangle ups=new Rectangle(430,737,25,25);
    private Rectangle down=new Rectangle(0,0,0,0);
    private Rectangle tables=new Rectangle(0,0,0,0);
    private ArrayList<Rectangle>rectangleList=new ArrayList<Rectangle>();
    private ArrayList<Towers>towersList=new ArrayList<Towers>();
    private ArrayList<Rectangle>removeList=new ArrayList<Rectangle>();
    private ArrayList<Fireball>fireballList=new ArrayList<Fireball>();
    private ArrayList<Damage>damageList=new ArrayList<Damage>();

    public Base(){
        damage=new ImageIcon("damage.png").getImage();
        gold=new ImageIcon("gold.png").getImage();
        redellipse=new ImageIcon("redellipse.png").getImage();
        meteorIcon=new ImageIcon("meteoricon.png").getImage();
        up= new ImageIcon("up.png").getImage();
        table= new ImageIcon("table.png").getImage();
        grass = new ImageIcon("grass.jpeg").getImage();
        spot = new ImageIcon("open.png").getImage();
        base = new ImageIcon("base3.png").getImage();
        towerSelect = new ImageIcon("towerSelect.png").getImage();
        archerUpgrade=new ImageIcon("archerupgrade.png").getImage();
        magicUpgrade=new ImageIcon("magicupgrade.png").getImage();
        freezeUpgrade=new ImageIcon("freezeupgrade.png").getImage();
        fireUpgrade=new ImageIcon("fireupgrade.png").getImage();
        fireprogression=new ImageIcon("fireprogression.png").getImage();
        magicprogression=new ImageIcon("magicprogression.png").getImage();
        archerprogression=new ImageIcon("archerprogression.png").getImage();
        iceprogression=new ImageIcon("iceprogression.png").getImage();
        addMouseListener(new clickListener());
    }

    public void addNotify() {
        super.addNotify();
        requestFocus();
        ready=true;
    }

    public void reset(){
    //	rectangleList=new ArrayList<Rectangle>();
		towersList=new ArrayList<Towers>();
    	start=false;
        badGuys.setBadList(new ArrayList<BadGuy>());
        TowerDefense.reset();
        TowerDefense.setRound(0);
        maps.reset();
		baseHp=500;
		myGold=500;
		built=false;
		//tracker2.reset();
    }

    public void baseHp(int damage){
        baseHp-=damage;
        if(baseHp<=0){
         	reset();
        }
    }
    public void setMyGold(int n){
        myGold+=n;
    }

    public void paintComponent(Graphics g){
        if(start==false){
            menu=TowerDefense.getMenu();
            menu.draw(g);
            TowerDefense.setMenu(menu);
        }
        else{
            badGuys=TowerDefense.getBadGuys();
            maps=TowerDefense.getMaps();
            badGuys.move();
            if(rectangleList.size()==0 && built==false){
            	System.out.println(rectangleList.size()+" "+maps.getMap());
               	rectangleList=maps.setRectList();
               	System.out.println(rectangleList.size());
            }
           	//System.out.println(rectangleList.size());
            maps.draw(g);
            g.setColor(Color.black);
            fontSys = new Font("Comic Sans MS",Font.PLAIN,20);
            g.setFont(fontSys);
            String finalString="Gold: "+Integer.toString(myGold);
            g.drawString(finalString, 50, 50);
            if(maps.getMap()==1){
                g.drawImage(base,807,0,null);
                g.setColor(Color.red);
                g.fillRect(812,5,40,5);
                g.setColor(Color.green);
                g.fillRect(812,5,baseHp/(500/40),5);
            }
            if(maps.getMap()==2){
                g.drawImage(base,450,60,null);
                g.setColor(Color.red);
                g.fillRect(455,65,40,5);
                g.setColor(Color.green);
                g.fillRect(455,65,baseHp/(500/40),5);
            }
            if(maps.getMap()==3){
                g.drawImage(base,0,100,null);
                g.setColor(Color.red);
                g.fillRect(5,105,40,5);
                g.setColor(Color.green);
                g.fillRect(5,105,baseHp/(500/40),5);
            }
            if(maps.getMap()==4){
                g.drawImage(base,0,565,null);
                g.setColor(Color.red);
                g.fillRect(5,570,40,5);
                g.setColor(Color.green);
                g.fillRect(5,570,baseHp/(500/40),5);
            }
            if(maps.getMap()==5){
                g.drawImage(base,830,130,null);
                g.setColor(Color.red);
                g.fillRect(835,135,40,5);
                g.setColor(Color.green);
                g.fillRect(835,135,baseHp/(500/40),5);
            }
			if(maps.getMap()==6){
                g.drawImage(base,0,350,null);
                g.setColor(Color.red);
                g.fillRect(5,340,40,5);
                g.setColor(Color.green);
                g.fillRect(5,340,baseHp/(500/40),5);
            }
            for(Towers x:towersList) {
                if(x.getType().equals("Freeze")) {
                    x.draw4(g);
                }
            }
            badGuys.draw(g);
            for(Towers x:towersList) {
                if(x.getType().equals("Magic")) {
                    x.draw(g);
                }
                if(x.getType().equals("Archer")) {
                    x.draw2(g);
                }
                if(x.getType().equals("Fire")) {
                    x.draw3(g);
                }
            }
            for(int i=0; i<rectangleList.size(); i++){
                Rectangle x=rectangleList.get(i);
                if(x.contains(destx,desty) || select1.contains(destx,desty) || select2.contains(destx,desty)
                || select3.contains(destx,desty) || select4.contains(destx,desty)) {
                    if(x.contains(destx,desty)) {
                        tracker=x;
                        int xs=(int) x.getX();
                        int ys=(int) x.getY();
                        g.drawImage(towerSelect,xs-71,ys-120,null);
                        select1.setBounds(xs-71+144,ys-120+15,42,42);
                        select2.setBounds(xs-71+14,ys-120+15,42,42);
                        select3.setBounds(xs-71+14,ys-120+119,42,42);
                        select4.setBounds(xs-71+144,ys-120+119,42,42);
                    }
                    if(select1.contains(destx,desty) && myGold>=100) {
                        built=true;
                        int xs=(int) select1.getX();
                        int ys=(int) select1.getY();
                        loadTowers(xs-122,ys+26,"Magic");
                        setSelect();
                        rectangleList.remove(tracker);
                    }
                    else if(select2.contains(destx,desty) && myGold>=100) {
                        built=true;
                        int xs=(int) select2.getX();
                        int ys=(int) select2.getY();
                        loadTowers(xs-85+95,ys+49+25,"Archer");
                        setSelect();
                        rectangleList.remove(tracker);
                    }
                    else if(select3.contains(destx,desty) && myGold>=100) {
                        built=true;
                        int xs=(int) select3.getX();
                        int ys=(int) select3.getY();
                        loadTowers(xs-50,ys-45,"Fire");
                        setSelect();
                        rectangleList.remove(tracker);
                    }
                    else if(select4.contains(destx,desty) && myGold>=100) {
                        built=true;
                        int xs=(int) select4.getX();
                        int ys=(int) select4.getY();
                        loadTowers(xs-79,ys-58,"Freeze");
                        setSelect();
                        rectangleList.remove(tracker);
                    }
                }
            }
            /*
            g.drawImage(meteorIcon,170,15,null);
            fontSys = new Font("Comic Sans MS",Font.PLAIN,20);
            g.setFont(fontSys);
            String cost1="35";
            String cost2="100";
            g.setColor(Color.black);
            g.drawString(cost1, 230, 50);
            //g.drawImage(damage,270,15,null);
            //g.drawString(cost2,330,49);
            //damage(g);
            upgrade(g);
            meteor(g);
            g.drawImage(up,430,737,null);
            table(g);
            */
            upgrade(g);
            g.drawImage(meteorIcon,180,10,null);
            meteor(g);
            g.drawImage(up,430,737,null);
            table(g);
           
        }

    }
    /*
    public void damage(Graphics g) {
        if(damageList.size()==0) {
            if(damageSelect.contains(destx,desty) && myGold>=100 && destx!=olderX && desty!=olderY) {
                olderX=destx;
                olderY=desty;
                damageList.add(new Damage());
                myGold-=100;
                if(towersList.size()!=0) {
                towersSize=towersList.size();
                    for(int i=0; i<towersList.size(); i++){
                        Towers w=towersList.get(i);
                        w.increaseDamage();
                    }
                }
            }
        } 
        else {
            Damage x=damageList.get(0);
            if(x.getRemove()==true) {
                if(towersList.size()!=0) {
                    for(int i=0; i<towersSize; i++){
                        Towers w=towersList.get(i);
                        w.decreaseDamage();
                    }
                }
                towersSize=0;
                damageList.remove(x);
            }
            else {
                x.draw(g);
            }
        }
    }
    */
    public void meteor(Graphics g) {
        if(fireballList.size()==0) {
            if(meteorSelect.contains(destx,desty) && myGold>=35) {
                olddestx=destx;
                olddesty=desty;
            }
            if(olddestx==destx && olddesty==desty) {
                int mouseX=(int)MouseInfo.getPointerInfo().getLocation().getX();
                int mouseY=(int)MouseInfo.getPointerInfo().getLocation().getY();
                g.drawImage(redellipse,mouseX-55,mouseY-60,null);
            }
            if(olddestx!=0 && olddesty!=0) {
                if(olddestx!=destx && olddesty!=desty) {
                    myGold-=35;
                    fireballList.add(new Fireball(destx,desty));
                }
            }
        }
        else {
            Fireball x=fireballList.get(0);
            if(x.getRemove()==true) {
                    fireballList.remove(x);
                    olddestx=0;
                    olddesty=0; 
            }
            else {
                 x.draw(g);
            }
        }
    }
            
    public void table(Graphics g) {
        if(ups.contains(destx,desty) || screenRect.contains(desty,desty) ) {
            if(down.contains(destx,desty)==false) {
                g.drawImage(table,0,672,null);
                down.setBounds(430,672,25,25);
                tables.setBounds(0,672,900,90);
                screenRect.setBounds(0,0,900,800);
                ifOpen=true;
                updateTable(g);
            }
        }
        if(down.contains(destx,desty)==true) {
            down.setBounds(0,0,0,0);
            tables.setBounds(0,0,0,0);
            screenRect.setBounds(0,0,0,0);
            ifOpen=false;
        }
    }

    public void upgrade(Graphics g) {
        fontSys = new Font("Comic Sans MS",Font.PLAIN,19);
        g.setFont(fontSys);
        g.setColor(Color.black);
        for(int i=0; i<towersList.size();i++){
            Towers x=towersList.get(i);
                if(x.getRectangle().contains(destx,desty) || upgradelvl.contains(destx,desty)) {
                    if(x.getLevel()<=3 && x.getType().equals("Archer")) {
                        if(x.getRectangle().contains(destx,desty)) {
                            tracker2=x;
                            g.drawImage(archerUpgrade,x.getX()+32,x.getY()-100,null);
                            String finalString=Integer.toString(x.getUpgradeCost());
                            g.drawString(finalString,x.getX()+32+40,x.getY()-100+36);
                            upgradelvl.setBounds(x.getX()+32,x.getY()-100,90,59);
                            x.grayscale(g);
                        }
                        update2(x);
                    }
                    if(x.getLevel()<=2 && x.getType().equals("Magic")) {
                        if(x.getRectangle().contains(destx,desty)) {
                            tracker2=x;
                            g.drawImage(magicUpgrade,x.getX()+32,x.getY()-70,null);
                            String finalString=Integer.toString(x.getUpgradeCost());
                            g.drawString(finalString,x.getX()+32+39,x.getY()-100+66);
                            upgradelvl.setBounds(x.getX()+32,x.getY()-70,90,59);
                            x.grayscale(g);
                        }
                        update2(x);
                    }
                    if(x.getLevel()<=2 && x.getType().equals("Freeze")) {
                        if(x.getRectangle().contains(destx,desty)) {
                            tracker2=x;
                            g.drawImage(freezeUpgrade,x.getX()-10,x.getY()-70,null);
                            String finalString=Integer.toString(x.getUpgradeCost());
                            g.drawString(finalString,x.getX()+30,x.getY()-100+66);
                            upgradelvl.setBounds(x.getX()-10,x.getY()-70,90,59);
                            x.grayscale(g);
                        }
                        update2(x);
                    }
                    if(x.getLevel()<=2 && x.getType().equals("Fire")) {
                        if(x.getRectangle().contains(destx,desty)) {
                            tracker2=x;
                            g.drawImage(fireUpgrade,x.getX()+95,x.getY()-70,null);
                            String finalString=Integer.toString(x.getUpgradeCost());
                            g.drawString(finalString,x.getX()+32+103,x.getY()-100+67);
                            upgradelvl.setBounds(x.getX()+95,x.getY()-70,90,59);
                            x.grayscale(g);
                            System.out.println("firre");
                        }
                        update2(x);
                    }
                }
        }
    }
    public void updateTable(Graphics g) {
        if(ifOpen==true) {
            for(int i=0; i<towersList.size();i++){
                Towers x=towersList.get(i);
                if(x.getRectangle().contains(destx,desty)) {
                     g.setColor(Color.black);
                     fontSys = new Font("Comic Sans MS",Font.PLAIN,15);
                     g.setFont(fontSys);
                     String baseDammage=Integer.toString(x.getDammage());
                     String radius=Integer.toString(x.getRadius());
                     String effective=x.getEffective();
                     String weakness=x.getWeakness();
                     String kills=Integer.toString(x.getKills());
                     String levelOn=Integer.toString(x.getLevel());
                     String finalString1="Base Damage: "+baseDammage;
                     g.drawString(finalString1, 390, 718);
                     String finalString2="Damage Radius: "+radius;
                     g.drawString(finalString2, 390, 738);
                     String finalString3="Effective Against: "+effective;
                     g.drawString(finalString3, 545, 718);
                     String finalString4="Weak Against: "+weakness;
                     g.drawString(finalString4, 545, 738);
                     String finalString5="Enemies Killed: "+kills;
                     g.drawString(finalString5, 735, 718);
                     String finalString6="Level: "+levelOn;
                     g.drawString(finalString6, 735, 738);
                     if(x.getType().equals("Archer")) {
                         g.drawImage(archerprogression,5,672,null);
                     }
                     if(x.getType().equals("Magic")) {
                         g.drawImage(magicprogression,5,672,null);
                     }
                     if(x.getType().equals("Freeze")) {
                         g.drawImage(iceprogression,5,672,null);
                     }
                     if(x.getType().equals("Fire")) {
                         g.drawImage(fireprogression,5,672,null);
                     }
                }
            }
        }
    }

    public void update2(Towers x) {
        if(upgradelvl.contains(destx,desty) && myGold>=x.getUpgradeCost()) {
           myGold-=x.getUpgradeCost();
           tracker2.setLevel();
           tracker2.upgrade();
           upgradelvl.setBounds(0,0,0,0);
        }
    }

    public void loadTowers(int x, int y, String type) {
        towersList.add(new Towers(type,x,y));
        myGold-=100;
    }
    public void setSelect() {
        select1.setBounds(0,0,0,0);
        select2.setBounds(0,0,0,0);
        select3.setBounds(0,0,0,0);
        select4.setBounds(0,0,0,0);
    }

    class clickListener implements MouseListener { //mouse class
        //track events of the mouse
        public void mouseEntered(MouseEvent e) {}
        public void mouseExited(MouseEvent e) {}
        public void mouseReleased(MouseEvent e) {}
        public void mouseClicked(MouseEvent e) {}
        //only necessary event is when the mouse is pressed
        public void mousePressed(MouseEvent e){
           destx = e.getX(); //takes the value of the x-coordinate where the mouse was clicked
           desty = e.getY(); //takes the value of the y-coordinate where the mouse was clicked
           System.out.println(destx+" "+desty);
        }
    }
    /*
    public ArrayList<Towers> getTowersList(){
        return towersList;
    }
    */
    public int getXCord(){
        return destx;
    }
    public int getYCord(){
        return desty;
    }
    public int getBaseHp(){
        return baseHp;
    }
    public void setBaseHp(int hp){
        baseHp=hp;
    }
    public void setStart(boolean s){
        start=s;
    }
    public void setRectList(){
  	rectangleList=new ArrayList<Rectangle>();
  	System.out.println(rectangleList.size()+" kkkj");
    }
}
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.ArrayList;
import java.awt.image.BufferedImage;
class Towers {
  private int dammage, level, goldBonus, Exp, locX, locY, radius, radX, radY, upgradeCost, kills=0;
  private String type, effective, weakness;
  double timeInterval;
  private int count=0;
  private int count2=1;
  private int count3=1;
  private int frame=1;
  private float gravity=0.5f;
  private float yPos, xPos;
  private float YVel=3.0f;
  private Image tower;
  private Image backleft, backright, arrowright, arrowleft, freeze1, freeze2, freeze3, freeze4, freeze5, freeze6;
  private Image fire1, fire2, fire3, fire4, fire5, fire6, fire7, fire8;
  private BadGuy enemy=null;
  private int exp2=500;
  private int exp3=2000;
  private int exp4=7000;
  private static ArrayList<BadGuy>badList=TowerDefense.getBadGuysList();
  private static ArrayList<BadGuy>freezeList=new ArrayList<BadGuy>();
  private static ArrayList<BadGuy>removedList=new ArrayList<BadGuy>();
  private Image purpleray;
  private Image[] archerRight= new Image[12];
  private Image[] archerLeft= new Image[12];
  private Image[] archerBehind= new Image[12];
  private Image[] archerBehindLeft= new Image[12];
  private Rectangle sizeCollide=new Rectangle(0,0,0,0);
  private boolean done=false;

  public Towers(String types, int x, int y) {
    type=types;
    locX=x;
    locY=y;
    yPos=locY-5;
    xPos=locX+50;
    backleft=new ImageIcon("backleft.png").getImage();
    backright=new ImageIcon("backright.png").getImage();
    arrowright=new ImageIcon("arrowright.png").getImage();
    arrowleft=new ImageIcon("arrowleft.png").getImage();
    for(int i=1; i<12; i++){
    archerRight[i] = new ImageIcon("archer right/"+i+".png").getImage();
    archerLeft[i] = new ImageIcon("archer left/"+i+".png").getImage();
    archerBehind[i] = new ImageIcon("archer behind/"+i+".png").getImage();
    archerBehindLeft[i] = new ImageIcon("behind left/"+i+".png").getImage();
    }
    freeze1=new ImageIcon("freeze/1.png").getImage();
    freeze2=new ImageIcon("freeze/2.png").getImage();
    freeze3=new ImageIcon("freeze/3.png").getImage();
    freeze4=new ImageIcon("freeze/4.png").getImage();
    freeze5=new ImageIcon("freeze/5.png").getImage();
    freeze6=new ImageIcon("freeze/6.png").getImage();
    
    if(type.equals("Archer")) {
      tower=new ImageIcon("archer.png").getImage();
      dammage=200;
      level=1;
      goldBonus=2;
      Exp=0;
      timeInterval=0.2;
      radius=200;
      sizeCollide.setBounds(locX+50,locY-5,60,67);
      radX=80;
      radY=28;
      upgradeCost=250;
      effective="Goblin";
      weakness="Troll";
    }
    if(type.equals("Fire")) {
      tower=new ImageIcon("fire.png").getImage();
      dammage=2;
      level=1;
      goldBonus=1;
      Exp=0;
      timeInterval=0.4;
      radius=150;
      sizeCollide.setBounds(locX+100+7,locY-5-7,72,95);
      radX=135;
      radY=35;
      fire1=new ImageIcon("explosion/1.png").getImage();
      fire2=new ImageIcon("explosion/2.png").getImage();
      fire3=new ImageIcon("explosion/3.png").getImage();
      fire4=new ImageIcon("explosion/4.png").getImage();
      fire5=new ImageIcon("explosion/5.png").getImage();
      fire6=new ImageIcon("explosion/6.png").getImage();
      fire7=new ImageIcon("explosion/7.png").getImage();
      fire8=new ImageIcon("explosion/8.png").getImage();
      upgradeCost=300;
      effective="Troll";
      weakness="Orc";
    }
    if(type.equals("Magic")) {
      tower=new ImageIcon("magic.png").getImage();
      dammage=2;
      level=1;
      goldBonus=3;
      Exp=0;
      timeInterval=0.5;
      radius=200;
      sizeCollide.setBounds(locX+50,locY-5,60,115);
      radX=80;
      radY=52;
      upgradeCost=275;
      effective="Orc";
      weakness="Witch";
    }
    if(type.equals("Freeze")) {
      tower=new ImageIcon("freeze.png").getImage();
      dammage=0;
      level=1;
      goldBonus=2;
      Exp=0;
      timeInterval=1;
      radius=125;
      sizeCollide.setBounds(locX,locY,70,87);
      radX=35;
      radY=43;
      upgradeCost=325;
      effective="N/A";
      weakness="N/A";
    }
  }
  public void upgrade() {
      if(type.equals("Archer") && level==2) {
          tower=new ImageIcon("archer2.png").getImage();
          dammage+=10;
          upgradeCost+=250;
          radius+=15;
      }
      if(type.equals("Archer") && level==3) {
          tower=new ImageIcon("archer3.png").getImage();
          dammage+=20;
          upgradeCost+=325;
          radius+=18;
      }
      if(type.equals("Archer") && level==4) {
          tower=new ImageIcon("archer4.png").getImage();
          dammage+=50;
          radius+=20;
      }
      if(type.equals("Magic") && level==2) {
          tower=new ImageIcon("magic2.png").getImage();
          dammage++;
          upgradeCost+=500;
          radius+=10;
      }
      if(type.equals("Magic") && level==3) {
          tower=new ImageIcon("magic3.png").getImage();
          radius+=12;
          dammage++;
      }
      if(type.equals("Freeze") && level==2) {
          tower=new ImageIcon("freeze2.png").getImage();
          upgradeCost+=350;
      }
      if(type.equals("Freeze") && level==3) {
          tower=new ImageIcon("freeze3.png").getImage();
      }
      if(type.equals("Fire") && level==2) {
          tower=new ImageIcon("fire2.png").getImage();
          dammage++;
          upgradeCost+=500;
          radius+=12;
      }
      if(type.equals("Fire") && level==3) {
          tower=new ImageIcon("fire3.png").getImage();
          dammage++;
          radius+=14;
      }
  }
  public void dammage() {
      if(enemy==null) {
          for(BadGuy w:badList) {
              if(Math.sqrt(((locX+radX-w.getX())*(locX+radX-w.getX()))+((locY+radY-w.getY())*(locY+radY-w.getY())))<=radius) {
                  enemy=w;
                  break;
              }
          }
      }
      if(enemy!=null) {
          if(Math.sqrt(((locX+radX-enemy.getX())*(locX+radX-enemy.getX()))+((locY+radY-enemy.getY())*(locY+radY-enemy.getY())))>radius) {
              enemy=null;
          }
      }

  }
  public void grayscale(Graphics g) {
    Graphics2D g2d = (Graphics2D) g.create();
    Color black=new Color(0,0,0);
    //set the stroke of the copy, not the original 
    g2d.setColor(black);
    Stroke dashed = new BasicStroke(6, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
    g2d.setStroke(dashed);
    g2d.drawOval(locX+radX-radius,locY+radY-radius,radius*2,radius*2);
    g2d.dispose();
  }
                                
  public void dammage2() {
      for(BadGuy w:badList) {
              if(Math.sqrt(((locX+35-w.getX())*(locX+35-w.getX()))+((locY+43-w.getY())*(locY+43-w.getY())))<=radius) {
                  if(removedList.contains(w)==false) {  
                      if(w.getHp()<=0) {
                          removedList.add(w);
                      }
                      if(Math.sqrt(((locX+35-w.getX())*(locX+35-w.getX()))+((locY+43-w.getY())*(locY+43-w.getY())))>radius) {
                          removedList.add(w);
                      }
                      if(level==1) {
                          if(w.getCounter()%2==0) {
                              w.setSpeed(0);
                          }
                          else {
                              w.setOrSpeed();
                          }
                      }
                      else if(level==2) {
                          if(w.getCounter()%2==0 || w.getCounter()%3==0) {
                              w.setSpeed(0);
                          }
                          else {
                              w.setOrSpeed();
                          }
                      }
                      else {
                          if(w.getCounter()%2==0 || w.getCounter()%3==0 || w.getCounter()%5==0) {
                              w.setSpeed(0);
                          }
                          else {
                              w.setOrSpeed();
                          }
                      }
                      w.setCounter();
                  }
              }
              
      }
  }

  public void draw(Graphics g) {
    dammage();
    g.drawImage(tower,locX+50,locY-5,null);
    if(enemy!=null) {
        Graphics2D g2=(Graphics2D)g;
        Color purple=new Color(102,0,153);
        g.setColor(purple);
        g2.setStroke(new BasicStroke(7));
        //magic tower attack - fix code for bomb tower
        if(enemy.getType().equals("troll")) {
            g2.draw(new Line2D.Float(locX+79,locY,enemy.getX()+18,enemy.getY()+20));
        }
        else {
            g2.draw(new Line2D.Float(locX+79,locY,enemy.getX()+15,enemy.getY()+20));
        }
            
        int x=enemy.getHp();
        String enemyType=enemy.getType();
        if(enemyType.toUpperCase().equals(effective.toUpperCase())) {
            enemy.setHp(x,dammage*2);
        }
        else if(enemyType.toUpperCase().equals(weakness.toUpperCase())) {
            enemy.setHp(x,dammage/2);
        }
        else {
            enemy.setHp(x,dammage);
        }
        if(enemy.getHp()<=0) {
            kills++;
            enemy=null;
            dammage();
        }
    }
  }
  public void draw3(Graphics g) {
      dammage();
      g.drawImage(tower,locX+100+7,locY-5-7,null);
      if(enemy!=null) {
         Graphics2D g2d = (Graphics2D) g.create();
         Color red=new Color(255,0,0);
        //set the stroke of the copy, not the original 
        g2d.setColor(red);
        Stroke dashed = new BasicStroke(6, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, new float[]{9}, 0);
        g2d.setStroke(dashed);
        if(enemy.getType().equals("troll")) {
            g2d.drawLine(locX+100+7+36,locY-5-7,enemy.getX()+18,enemy.getY()+20);
        }
        else {
            g2d.drawLine(locX+100+7+36,locY-5-7,enemy.getX()+15,enemy.getY()+20);
        }
        //gets rid of the copy
        g2d.dispose();
            if(count3<=3) {
                g.drawImage(fire1,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=6) {
                g.drawImage(fire2,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=9) {
                g.drawImage(fire3,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=12) {
                g.drawImage(fire4,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=15) {
                g.drawImage(fire5,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=18) {
                g.drawImage(fire6,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=21) {
                g.drawImage(fire7,enemy.getX(),enemy.getY()-5,null);
            }
            else if(count3<=24) {
                g.drawImage(fire8,enemy.getX(),enemy.getY()-5,null);
            }
            if(count3==24) {
                count3=0;
            } 
            count3++;

        int x=enemy.getHp();
        String enemyType=enemy.getType();
        if(enemyType.toUpperCase().equals(effective.toUpperCase())) {
            enemy.setHp(x,dammage*2);
        }
        else if(enemyType.toUpperCase().equals(weakness.toUpperCase())) {
            enemy.setHp(x,dammage/2);
        }
        else {
            enemy.setHp(x,dammage);
        }
        if(enemy.getHp()<=0) {
            kills++;
            enemy=null;
            dammage();
            count3=1;
        }
    }
  }
  public void draw4(Graphics g) {
      if(done==false) {
          if(count2<10) {
              g.drawImage(freeze1,locX-90,locY-82,null);
          }
          else if(count2<20) {
              g.drawImage(freeze2,locX-90,locY-82,null);
          }
          else if(count2<30) {
              g.drawImage(freeze3,locX-90,locY-82,null);
          }
          else if(count2<40) {
              g.drawImage(freeze4,locX-90,locY-82,null);
          }
          else if(count2<50) {
              g.drawImage(freeze5,locX-90,locY-82,null);
          }
          else if(count2<60) {
              g.drawImage(freeze6,locX-90,locY-82,null);
          }
          g.drawImage(tower,locX,locY,null);
          count2++;
          if(count2>59) {
              done=true;
          } 
      }
      else { 
          g.drawImage(freeze6,locX-90,locY-82,null);
          g.drawImage(tower,locX,locY,null);
          dammage2();  
      }
  }
  
  public void draw2(Graphics g) {
      dammage();
      dammage();
      g.drawImage(tower,locX+50,locY-5,null);
      
      if(enemy!=null) {
          if(enemy.getX()>=locX+50+7 && enemy.getY()>locY-5-10) {
              if(frame==1 || frame==2) {
                  g.drawImage(archerRight[frame],locX+50+7+3,locY-5-28-3,null);
              }
              if(frame>2 && frame<9) {
                  g.drawImage(archerRight[frame],locX+50+7+3,locY-5-5-28-3,null);
              }
              if(frame>8 && frame<11) {
                  g.drawImage(archerRight[frame],locX+50+7+3,locY-5-28-3,null);
              }
              if(frame==11 || frame==12) {
                  g.drawImage(archerRight[frame],locX+50+7+3,locY-5-28-3,null);
              }
              if(frame>8) {
                  g.drawImage(arrowright,locX+50+7+37+(frame-8)*4,locY-5-28+7+(frame-8),null);
              }
                  
              
          }
          if(enemy.getX()<locX+50+7 && enemy.getY()>locY-5-10) {
              
              if(frame==1 || frame==2) {
                  g.drawImage(archerLeft[frame],locX+50+5+3,locY-5-28-3,null);
              }
              if(frame>2 && frame<9) {
                  g.drawImage(archerLeft[frame],locX+50-9+5+3,locY-5-5-28-3,null);
              }
              if(frame>8 && frame<11) {
                  g.drawImage(archerLeft[frame],locX+50-8+5+3,locY-5-28-3,null);
              }
              if(frame==11 || frame==12) {
                  g.drawImage(archerLeft[frame],locX+50+5+3,locY-5-28-3,null);
              }
              if(frame>8) {
                  g.drawImage(arrowleft,locX+20-((frame-8)*4),locY-5-28+7+(frame-8),null);
              }
              
          }
          if(enemy.getY()<=locY-5-10 && enemy.getX()>=locX+50+7) {
              g.drawImage(archerBehind[frame],locX+50+7+3,locY-5-29-3,null);
              if(frame>6 && frame<11) {
                  g.drawImage(backright,locX+55+37+((frame-6)*4),locY-5-33+7-((frame-6)*2),null);
              }
          }
          if(enemy.getY()<=locY-5-10 && enemy.getX()<locX+50+7) {
              if(frame==1 || frame==2) {
                  g.drawImage(archerBehindLeft[frame],locX+50+7+3,locY-5-29-3,null);
              }
              if(frame>2 && frame<7) {
                  g.drawImage(archerBehindLeft[frame],locX+50+7-4+3,locY-5-29-3,null);
              }
              if(frame>6 && frame<9) {
                  g.drawImage(archerBehindLeft[frame],locX+50+7-6+3,locY-5-29-3,null);
              }
              if(frame==9 || frame==10) {
                  g.drawImage(archerBehindLeft[frame],locX+50+7+3,locY-5-29-3,null);
              }
              if(frame==11 || frame==12) {
                  g.drawImage(archerBehindLeft[frame],locX+50+7+9+3,locY-5-29-3,null);
              }
              if(frame>6 && frame<11) {
                  g.drawImage(backleft,locX+20-((frame-8)*4),locY-5-33+7-((frame-6)*2),null);
              }
          }
          count++;
          if(count==5) {
              frame++;
              count=0;
          }
          if(frame>11) {
              int x=enemy.getHp();
              String enemyType=enemy.getType();
              if(enemyType.toUpperCase().equals(effective.toUpperCase())) {
                  enemy.setHp(x,dammage*2);
              }
              else if(enemyType.toUpperCase().equals(weakness.toUpperCase())) {
                  enemy.setHp(x,dammage/2);
              }
              else {
                  enemy.setHp(x,dammage);
              }
              if(enemy.getHp()<=0) {
                   kills++;
                   enemy=null;
                   dammage();
              }
              frame=1;
          } 
      }
      else {
          g.drawImage(archerRight[1],locX+50+7+3,locY-5-28-3,null);
      }
      
           
  }
  public int getKills() {
      return kills;
  }
  public int getUpgradeCost() {
      return upgradeCost;
  }
  public int getRadius() {
      return radius;
  }
  public void setLevel() {
      level++;
  }
  public int getLevel() {
      return level;
  } 
  public int getDammage() {
      return dammage;
  }
  public Rectangle getRectangle() {
      return sizeCollide;
  }
  public String getType() {
      return type;
  }
  public int getX() {
      return locX;
   }
  public int getY() {
      return locY;
  }
  public String getEffective() {
      return effective;
  }
  public String getWeakness() {
      return weakness;
  }
  public void increaseDamage() {
      if(type.equals("Archer")) {
          dammage+=200;
      }
      else {
            dammage++;
      }
  }
  public void decreaseDamage() {
      if(type.equals("Archer")) {
          dammage-=200;
      }
      else {
            dammage--;
      }
  }
 public void reset(){
  	ArrayList<BadGuy>removedList=new ArrayList<BadGuy>();
  }
}
